#include "common.h"
#include "mark_adjust.h"

uniform float4 m_hud_params;

struct p_lfo_dot_out
{
    float4 main         : SV_Target0;
    float4 additional   : SV_Target1;
};

float resize(float input, float factor, float offset)
{
	return (input - 0.5 + offset) / factor + 0.5 - offset;
}

p_lfo_dot_out main	(p_flat I, float4 pos2d: SV_Position, float2 tc0: TEXCOORD0): SV_Target
{
	float factor = screen_res.y / 2160.0;
	factor = factor * (1.0 / (m_hud_params.z / 0.45)) * 0.75;
	float size = 512.0 * factor;
	
	pos2d.x = pos2d.x - (screen_res.x - size) / 2.0;
	pos2d.y = pos2d.y - (screen_res.y - size) / 2.0;
	pos2d.x = resize(pos2d.x, factor, 0);
	pos2d.y = resize(pos2d.y, factor, 0);
	
	#ifdef MARK_ADJUST
	pos2d.xy = mark_adjust(pos2d.xy / 512.0) * 512.0 * mark_sides();
	#endif
	
	float4 color = s_base.Load(pos2d.xyz, 0) * m_hud_params.x;
	
	p_lfo_dot_out O;
    O.main = color;
    if (O.main.a > 0.2)
        O.additional = float4(0.0, 0.0, 1.0, 1.0);
    else
        O.additional = float4(0.0, 0.0, 0.0, 0.0);
	
	return O;
}
